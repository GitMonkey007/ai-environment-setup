# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"
  #config.vm.box = "ubuntu/eoan64"
  config.vm.boot_timeout = 2400
  config.vm.network "forwarded_port", guest: 8888, host: 8888,
    auto_correct: true
  config.vm.usable_port_range = 8000..8999
  config.vm.hostname = 'TensorflowRUs'
  config.disksize.size = '50GB'


  #config.vm.box_version = "20200201.01"
  # config.disksize.size = "20GB"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
   config.vm.box_check_update = true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
     vb.name = config.vm.hostname
  
     # Customize the amount of memory on the VM:
     vb.memory = 2048
     vb.cpus = 2
     #vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
     #vb.customize ["modifyvm", :id, "--uartmode1", "file", "./ttyS0.log"]
     #vb.customize ['modifyvm', :id, '--clipboard-mode', 'bidirectional']
   end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision "file", source: "Anaconda.desktop", destination: "/usr/share/applications/Anaconda.desktop"
  config.vm.provision "file", source: "PyCharm.desktop", destination: "/usr/share/applications/PyCharm.desktop"
  config.vm.provision "file", source: "AndroidStudio.desktop", destination: "/usr/share/applications/AndroidStudio.desktop"
  config.vm.provision :shell, run: "always", :path => "setup.sh"
  config.vm.provision :shell, run: "always", :path => "git_repos.sh"
  config.vm.provision :shell, run: "always", :path => "install-desktop.sh"
end
